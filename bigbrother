#!/usr/bin/env python3

# The Big Brother prevents you from touching your face while you think or relax.
# Copyright (C) 2022  Nicol√≤ Santamaria

# The Big Brother is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# The Big Brother is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

"""
The Big Brother

Usage:
  bigbrother [-s | --silent]
  bigbrother [-s | --silent] [-d | --debug]
  bigbrother (-h | --help)

Options:
  -h --help     Show this help message.
  -s --silent   Uses video output instead of FBI siren.
  -d --debug    Starts a window with the video from the cam.
"""

import os
import cv2
import mediapipe as mp
import time
import multiprocessing as multiproc
import tkinter as tk
from pathlib import Path as path
from pynput import keyboard
from playsound import playsound
from docopt import docopt

min = lambda a, b: a if a < b else b
max = lambda a, b: a if a > b else b

class Rect:
	def __init__(self, xmin, ymin, xmax, ymax):
		self.xmin = xmin
		self.ymin = ymin
		self.xmax = xmax
		self.ymax = ymax

	def overlaps(self, r):
		xmin = max(self.xmin, r.xmin)
		ymin = max(self.ymin, r.ymin)
		xmax = min(self.xmax, r.xmax)
		ymax = min(self.ymax, r.ymax)

		return (max(0, xmax - xmin) * max(0, ymax - ymin)) > 0

	def __str__(self):
		return f"{{xmin: {self.xmin}, ymin: {self.ymin}, xmax: {self.xmax}, ymax: {self.ymax}}}"

class Alarm:
	procs = []
	soundfile = os.path.join(path.home(), ".local", "share", "bigbrother", "police.mp3")

	def __init__(self, silent):
		self.silent = silent

	def run(self):
		if self.silent:
			w = tk.Tk()
			w.attributes("-fullscreen", True)
			w.title("The Big Brother")
			w.mainloop()
		else:
			while True: playsound(self.soundfile, block=True)


	def toggle(self, active):
		if active:
			p = multiproc.Process(target=self.run)
			self.procs.append(p)
			p.start()
		else:
			for p in self.procs:
				p.terminate()
			self.procs = []

class BigBrother:
	def __init__(self, silent=False, debug=True):
		self.debug = debug
		self.alarm = Alarm(silent)
		self.cap = cv2.VideoCapture(0)

		self.mpHands = mp.solutions.hands
		self.hands = self.mpHands.Hands(
			static_image_mode=False, 
			max_num_hands=2, 
			min_detection_confidence=0.7, 
			min_tracking_confidence=0.5)

		self.mpFace = mp.solutions.face_mesh
		self.face = self.mpFace.FaceMesh()

		self.mpDraw = mp.solutions.drawing_utils
		self.ispaused = False

		keyboard.Listener(on_press=self.pause, on_release=self.unpause).start()

	def pause(self, key):
		if key == keyboard.Key.pause and not self.ispaused:
			self.ispaused = True

	def unpause(self, key):
		if key == keyboard.Key.pause and self.ispaused:
			self.ispaused = False

	def process_face(self, img):
		h, w, _ = img.shape
		xmin = w
		ymin = h
		xmax = 0
		ymax = 0

		for faceLms in self.faceResult.multi_face_landmarks:
			for _, lm in enumerate(faceLms.landmark):
				x = int(lm.x * w)
				y = int(lm.y * h)

				if self.debug:
					cv2.circle(img, (x, y), 5, (100, 100, 0), -1)

				xmax = max(xmax, x)
				ymax = max(ymax, y)
				xmin = min(xmin, x)
				ymin = min(ymin, y)

		if self.debug:
			cv2.rectangle(img, (xmin, ymin), (xmax, ymax), (0, 255, 0), 2)
		
		return Rect(xmin, ymin, xmax, ymax)

	def process_hands(self, img):
		h, w, _ = img.shape
		xmin = w
		ymin = h
		xmax = 0
		ymax = 0

		for handLms in self.handsResult.multi_hand_landmarks:
			for _, lm in enumerate(handLms.landmark):
				x = int(lm.x * w)
				y = int(lm.y * h)

				if self.debug:
					cv2.circle(img, (x, y), 3, (255, 0, 255), cv2.FILLED)

				xmax = max(xmax, x)
				ymax = max(ymax, y)
				xmin = min(xmin, x)
				ymin = min(ymin, y)

			if self.debug:
				self.mpDraw.draw_landmarks(img, handLms, self.mpHands.HAND_CONNECTIONS)

		if self.debug:
			cv2.rectangle(img, (xmin, ymin), (xmax, ymax), (0, 0, 255), 2)

		return Rect(xmin, ymin, xmax, ymax)

	def watch(self):
		pTime = 0
		cTime = 0
		isoverlapping = False

		while True:
			faceRect = None
			handsRect = None

			_, img = self.cap.read()
			imgRGB = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
			
			self.handsResult = self.hands.process(imgRGB)
			self.faceResult = self.face.process(imgRGB)

			if self.faceResult.multi_face_landmarks:
				faceRect = self.process_face(img)

			if self.handsResult.multi_hand_landmarks:
				handsRect = self.process_hands(img)

			if not self.ispaused:
				if handsRect and faceRect:
					tmp = handsRect.overlaps(faceRect)
					if tmp != isoverlapping:
						self.alarm.toggle(tmp)

					isoverlapping = tmp
				elif isoverlapping:
					self.alarm.toggle(False)
					isoverlapping = False


			if self.debug:
				cTime = time.time()
				fps = 1 / (cTime - pTime)
				pTime = cTime
				cv2.putText(img, str(int(fps)), (10, 70), cv2.FONT_HERSHEY_PLAIN, 3, (255, 0, 255), 3)
				cv2.imshow("The Big Brother", img)

			cv2.waitKey(1)

if __name__ == "__main__":
	while True:
		try:
			args = docopt(__doc__)
			bb = BigBrother(args["--silent"], args["--debug"])
			bb.watch()
		except KeyboardInterrupt:
			exit("")
		except (BrokenPipeError, Xlib.error.ConnectionClosedError):
			time.sleep(5)
