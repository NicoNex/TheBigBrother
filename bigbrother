#!/usr/bin/env python3

# The Big Brother prevents you from touching your face while you think or relax.
# Copyright (C) 2022  Nicol√≤ Santamaria

# The Big Brother is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# The Big Brother is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

"""
The Big Brother

Usage:
  bigbrother [options]
  bigbrother (-h | --help)

Options:
  -h --help                    Show this help message.
  -s --silent                  Uses video output instead of FBI siren.
  -d --debug                   Starts a window with the video from the cam.

  -F LMS, --face-landmarks LMS Comma separated list of four face landmarks.
                               Used to draw a custom rectangle on the user's face
                               and checks whether any hand landmark is contained in it.
                               They don't need to be the corners of the rectangle.

  -H LMS, --hand-landmarks LMS Comma separated list of hand landmarks.
                               The Big Brother checks if any of them are contained
                               in the face rectangle.
                               If none is specified it checks for all of them.
"""

import os
import cv2
import mediapipe as mp
import time
import multiprocessing as multiproc
import tkinter as tk
from pathlib import Path as path
from pynput import keyboard
from playsound import playsound
from docopt import docopt
from sys import platform

WHITE   = (255, 255, 255)
BLACK   = (0, 0, 0)
RED     = (255, 0, 0)
GREEN   = (0, 255, 0)
BLUE    = (0, 0, 255)
FUCHSIA = (255, 0, 255)


class Dot:
	def __init__(self, x, y):
		self.x = x
		self.y = y

	def __str__(self):
		return f"{{x: {self.x}, y: {self.y}}}"

class Rect:
	def __init__(self, xmin, ymin, xmax, ymax):
		self.xmin = xmin
		self.ymin = ymin
		self.xmax = xmax
		self.ymax = ymax

	def overlaps(self, r):
		xmin = max(self.xmin, r.xmin)
		ymin = max(self.ymin, r.ymin)
		xmax = min(self.xmax, r.xmax)
		ymax = min(self.ymax, r.ymax)

		return (max(0, xmax - xmin) * max(0, ymax - ymin)) > 0

	def contains(self, d):
		return d.x >= self.xmin and d.x <= self.xmax and d.y >= self.ymin and d.y <= self.ymax

	def contains_dots(self, dots):
		for d in dots:
			if self.contains(d):
				return True
		return False

	def __str__(self):
		return f"{{xmin: {self.xmin}, ymin: {self.ymin}, xmax: {self.xmax}, ymax: {self.ymax}}}"

class Alarm:
	procs = []
	if "linux" in platform.lower():
		soundfile = os.path.join(path.home(), ".local", "share", "bigbrother", "police.mp3")
	elif "win" in platform.lower():
		# this uses replace because it's bugged on windows
		# https://stackoverflow.com/questions/68861878/error-cannot-specify-extra-characters-after-a-string-enclosed-in-quotation-mark
		soundfile = path(os.path.join(os.environ.get("LOCALAPPDATA"), "BigBrother", "sounds", "police.mp3"))
		soundfile = f'\"{soundfile}\"'

	def __init__(self, silent):
		self.silent = silent

	def run(self):
		if self.silent:
			w = tk.Tk()
			w.attributes("-fullscreen", True)
			w.title("The Big Brother")
			w.mainloop()
		else:
			while True: playsound(self.soundfile, block=True)


	def toggle(self, active):
		if active:
			p = multiproc.Process(target=self.run)
			self.procs.append(p)
			p.start()
		else:
			for p in self.procs:
				p.terminate()
			self.procs = []

class BigBrother:
	def __init__(self, silent=False, debug=True, face_landmarks=None, hand_landmarks=None):
		self.debug = debug
		self.flms = face_landmarks
		self.hlms = hand_landmarks
		self.alarm = Alarm(silent)
		self.cap = cv2.VideoCapture(0)
		
		self.mpHands = mp.solutions.hands
		self.hands = self.mpHands.Hands(
			static_image_mode=False, 
			max_num_hands=2, 
			min_detection_confidence=0.7, 
			min_tracking_confidence=0.5
		)

		self.mpFace = mp.solutions.face_mesh
		self.face = self.mpFace.FaceMesh()

		self.mpDraw = mp.solutions.drawing_utils
		self.ispaused = False

		keyboard.Listener(on_press=self.pause, on_release=self.unpause).start()

	def pause(self, key):
		if key == keyboard.Key.pause and not self.ispaused:
			self.ispaused = True

	def unpause(self, key):
		if key == keyboard.Key.pause and self.ispaused:
			self.ispaused = False

	# Renders the face mesh tesselation and the dot indexes.
	def render_face_landmarks(self, img, height, width):
		for faceLms in self.faceResult.multi_face_landmarks:
			self.mpDraw.draw_landmarks(img, faceLms, self.mpFace.FACEMESH_TESSELATION)

			for i, lm in enumerate(faceLms.landmark):
				x = int(lm.x * width)
				y = int(lm.y * height)
				cv2.putText(img, str(i), (x, y), cv2.FONT_HERSHEY_SCRIPT_SIMPLEX, 0.3, GREEN, 1)

	# Returns the rectangle containing either all the face landmarks or the provided ones.
	def process_face(self, img):
		h, w, _ = img.shape
		xmin = w
		ymin = h
		xmax = 0
		ymax = 0

		for faceLms in self.faceResult.multi_face_landmarks:
			lms = [faceLms.landmark[i] for i in self.flms] if self.flms else faceLms.landmark
			for i, lm in enumerate(lms):
				x = int(lm.x * w)
				y = int(lm.y * h)

				xmax = max(xmax, x)
				ymax = max(ymax, y)
				xmin = min(xmin, x)
				ymin = min(ymin, y)

		if self.debug:
			cv2.rectangle(img, (xmin, ymin), (xmax, ymax), FUCHSIA, 2)
			self.render_face_landmarks(img, h, w)

		return Rect(xmin, ymin, xmax, ymax)

	# Renders the connections of the hand and the dot indexes.
	def render_hand_landmarks(self, img, height, width):
		for handLms in self.handsResult.multi_hand_landmarks:
			self.mpDraw.draw_landmarks(img, handLms, self.mpHands.HAND_CONNECTIONS)

			for i, lm in enumerate(handLms.landmark):
				x = int(lm.x * width)
				y = int(lm.y * height)
				cv2.putText(img, str(i), (x, y), cv2.FONT_HERSHEY_SCRIPT_SIMPLEX, 0.5, GREEN, 1)


	# Computes the hand landmarks and returns their corresponding coordinates.
	def process_hands(self, img):
		h, w, _ = img.shape

		dots = []
		for handLms in self.handsResult.multi_hand_landmarks:
			lms = [handLms.landmark[i] for i in self.hlms] if self.hlms else handLms.landmark
			for _, lm in enumerate(lms):
				dots.append(Dot(int(lm.x * w), int(lm.y * h)))

		if self.debug:
			self.render_hand_landmarks(img, h, w)

		return dots

	# watch is the application main loop.
	def watch(self):
		pTime = 0
		cTime = 0
		isoverlapping = False

		while True:
			faceRect = None
			handDots = None

			_, img = self.cap.read()
			imgRGB = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
			
			self.handsResult = self.hands.process(imgRGB)
			self.faceResult = self.face.process(imgRGB)

			if self.faceResult.multi_face_landmarks:
				faceRect = self.process_face(img)

			if self.handsResult.multi_hand_landmarks:
				handDots = self.process_hands(img)

			if not self.ispaused:
				if handDots and faceRect:
					tmp = faceRect.contains_dots(handDots)
					if tmp != isoverlapping:
						self.alarm.toggle(tmp)

					isoverlapping = tmp
				elif isoverlapping:
					self.alarm.toggle(False)
					isoverlapping = False


			if self.debug:
				cTime = time.time()
				fps = 1 / (cTime - pTime)
				pTime = cTime
				cv2.putText(img, str(int(fps)), (10, 70), cv2.FONT_HERSHEY_SCRIPT_SIMPLEX, 3, FUCHSIA, 3)
				cv2.imshow("The Big Brother", img)

			cv2.waitKey(1)

if __name__ == "__main__":
	landmarks = lambda s: [int(val) for val in s.split(",")] if s else None

	while True:
		try:
			args = docopt(__doc__)
			bb = BigBrother(
				silent         = args["--silent"],
				debug          = args["--debug"],
				face_landmarks = landmarks(args["--face-landmarks"]),
				hand_landmarks = landmarks(args["--hand-landmarks"])
			)
			bb.watch()
		except KeyboardInterrupt:
			exit("")
		except BrokenPipeError:
			time.sleep(5)
